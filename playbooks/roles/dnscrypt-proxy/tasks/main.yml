---
- stat:
    path: "{{ dnscrypt_proxy_bin_location }}/dnscrypt_proxy"
  register: dnscrypt_proxy_binary

- set_fact:
    dnscrypt_proxy_installed: "{{ dnscrypt_proxy_binary.stat.exists | default(false) }}"

- name: set device architecture and package manager vars
  set_fact:
    device_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm' }}"

- name: install package
  import_tasks: install_package.yml
  when: (not dnscrypt_proxy_installed) and (ansible_pkg_mgr == 'yum' or ansible_pkg_mgr == 'apt') and (ansible_architecture == 'x86_64' or ansible_architecture == 'arm')

- name: install binary
  import_tasks: install_binary.yml
  when: (not dnscrypt_proxy_installed) and ((pkg_mgr_output is undefined or pkg_mgr_output is failed) or ansible_architecture == 'armv7l')

- name: Set network capabilities for dnscrypt_proxy
  capabilities:
    path: "{{ dnscrypt_proxy_bin_location }}/dnscrypt_proxy"
    capability: cap_net_bind_service+ep
    state: present
  when: dnscrypt_proxy_port|int < 1024

- command: dnscrypt_proxy update
  register: update_command
  changed_when: update_command.rc == '64'

- name: create dnscrypt_proxy nologin user
  become: yes
  user:
    name: dnscrypt_proxy
    shell: /usr/sbin/nologin
    system: True
    create_home: False

- name: set ownership of /usr/local/bin/dnscrypt_proxy
  file:
    path: /usr/local/bin/dnscrypt_proxy
    state: file
    owner: dnscrypt_proxy
    group: dnscrypt_proxy

- name: template config file
  template:
    src: dnscrypt_proxy.j2
    dest: /etc/default/dnscrypt_proxy
    owner: dnscrypt_proxy
    group: dnscrypt_proxy
  notify: restart dnscrypt_proxy service
  tags: systemd

- name: copy systemd service
  copy:
    src: dnscrypt_proxy.service
    dest: /etc/systemd/system/
    owner: root
    group: root
    mode: 0644
  notify: restart dnscrypt_proxy service
  register: service
  tags: systemd

- name: enable systemd service
  service:
    name: dnscrypt_proxy
    enabled: "{{ dnscrypt_proxy_enable_service }}"
  when: service.changed
  tags: systemd

- name: Allow port in firewall
  ufw:
    rule: allow
    port: "{{ dnscrypt_proxy_port }}"
    comment: "allow dnscrypt_proxy"
  when: dnscrypt_proxy_allow_firewall

# DNSMASQ
- name: Remove existing upstream servers in dnsmasq
  replace:
    path: /etc/dnsmasq.conf
    regexp: "^server=(.*)$"

- name: Set upstream DNS server to dnscrypt_proxy proxy
  lineinfile:
    path: /etc/dnsmasq.conf
    state: present
    line: "server=127.0.0.1#{{ dnscrypt_proxy_port }}"
  notify: Restart dnsmasq
